# This file contains common configurations and pin mappings for the Prusa
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_27004C000850314335393720-if00

restart_method: command

[virtual_sdcard]
path: ~/.octoprint/uploads/


#[input_shaper]
#shaper_freq_x: 54
#shaper_freq_y: 21.9
#shaper_type: ei

[stepper_x]
step_pin: PD1
dir_pin: PD0
enable_pin: !PD3
microsteps: 16
rotation_distance: 32  # 200 * 16 / 100
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_endstop: 180.4
position_min: -2
position_max: 180.4
homing_speed: 50
homing_retract_dist: 0

[stepper_y]
step_pin: PD13
dir_pin: PD12
enable_pin: !PD14
microsteps: 16
rotation_distance: 32  # 200 * 16 / 100
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_endstop: -3
position_min: -3
position_max: 180
homing_speed: 50
homing_retract_dist: 0

[stepper_z]
step_pin: PD4
dir_pin: !PD15
enable_pin: !PD2
microsteps: 16
rotation_distance: 4
endstop_pin: probe:z_virtual_endstop
position_min: -3
position_max: 185


[extruder]
step_pin: PD9
dir_pin: !PD8
enable_pin: !PD10
microsteps: 16
rotation_distance: 25.2778  # (200 * 16 * 48/18) / 325
gear_ratio: 48:18
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PB1
sensor_type: ATC Semitec 104GT-2
sensor_pin: PC0
control: pid
min_extrude_temp: 160
# Prusa's firmware defaults.
pid_Kp:  19.791 
pid_Ki: 1.118 
pid_Kd: 87.576 #8
min_temp: 10
max_temp: 305
pressure_advance: 0.36

[tmc2209 stepper_x]
uart_pin: PD5
uart_address: 1
diag_pin: ^PE2
driver_SGTHRS: 130
run_current: 0.55
sense_resistor: 0.22
stealthchop_threshold: 999999

[tmc2209 stepper_y]
uart_pin: PD5
uart_address: 3
diag_pin: ^PE1
driver_SGTHRS: 130
run_current: 0.55
sense_resistor: 0.22
stealthchop_threshold: 999999

[tmc2209 stepper_z]
uart_pin: PD5
uart_address: 0
diag_pin: ^PE3
driver_SGTHRS: 100
run_current: 0.45
sense_resistor: 0.22
stealthchop_threshold: 999999

[tmc2209 extruder]
uart_pin: PD5
uart_address: 2
diag_pin: ^PA15
driver_SGTHRS: 100
run_current: 0.4
sense_resistor: 0.22

[heater_bed]
heater_pin: PB0
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA4
control: pid
# Prusa's firmware defaults.
pid_Kp: 58.001 
pid_Ki: 1.190 
pid_Kd: 706.882
min_temp: 10
max_temp: 110

# Hotend fan.
# The stock firmware uses control ranges of PWM 0-50%, RPM 1000-8000.
# Change fan_speed below to match your preference. Measured speeds:
#   fan_speed 0.5:  50% PWM = 4000RPM (Prusa stock default speed)
#   fan_speed 1.0: 100% PWM = 8000RPM (safe but loud)
[heater_fan hotend_fan]
pin: PE9
tachometer_pin: PE14
fan_speed: 0.5 #0.5

# Part cooling fan.
# The stock firmware uses control ranges of PWM 10-50%, RPM 500-5000.
# To match stock firmware, set the Klipper fan speed to 50%. This speed
# can be safely increased to 100% for better part cooling. Measured speeds:
#    50% PWM = 2500RPM (Prusa stock default speed)
#   100% PWM = 5000RPM (better cooling, still quiet)
[fan]
pin: PE11
tachometer_pin: PE10

[output_pin BEEPER_pin]
pin: PA0
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

# The SuperPINDA has built-in temperature compensation and no thermistor output,
# so no compensation table is needed here.

[probe]
pin: PA8
x_offset: -29
y_offset: -3
z_offset: 1.49  # set this to your Live Z Offset, but negated (invert the sign)
speed: 8
samples:2
samples_result: median
sample_retract_dist: 1
samples_tolerance: 0.03
samples_tolerance_retries: 10

[safe_z_home]
home_xy_position: 147.4,21.1
z_hop: 4

[bed_mesh]
speed: 140
horizontal_move_z: 5
mesh_min: 10,10
mesh_max: 141,167
probe_count: 4,4

[filament_switch_sensor filament_sensor]
switch_pin: ^PB4
pause_on_runout: True
runout_gcode:
  {action_respond_info("RUNOUT Motion Sensor: Filament runout")}
  CHANGE_FILAMENT
insert_gcode:
  {action_respond_info("RUNOUT Motion Sensor: Filament inserted")}
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
event_delay: 3.0
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds.
pause_delay: 0.5
##    XYE mcu E0DET


[printer]
kinematics: cartesian
# Prusa firmware defaults.
max_velocity: 350 #350
max_accel: 14000 #14000
max_z_velocity: 12
max_z_accel: 400
max_accel_to_decel: 7500 #7500
square_corner_velocity: 5 #5
#max flow = 25
[display]
lcd_type: st7789v
spi_bus: spi2a
rst_pin: PC8
cs_pin: PC9
rs_pin: PD11
encoder_pins: ^PE13, ^PE15
click_pin: ^!PE12
display_group: _default_20x4

[display_data _default_20x4 extruder]
position: 1, 0
text: { render("_heater_temperature", param_heater_name="extruder") }

[display_data _default_20x4 heater_bed1]
position: 0, 15
text:Bed
[display_data _default_20x4 heater_bed]
position: 1, 15
text: { render("_heater_temperature", param_heater_name="heater_bed") }

[display_data _default_20x4 extruder1]
position: 0, 0
text:Extruder

[display_data _default_20x4 fan1]
position: 4, 15
text: { render("_fan_speed") }

[display_data _default_20x4 fan]
position: 3, 15
text:Fan
  
[display_data _default_20x4 speedfactor]
position: 3, 0
text:Feed Rate

[display_data _default_20x4 speed_factor]
position: 4, 0
text:
  ~feedrate~
  { "{:^4.0%}".format(printer.gcode_move.speed_factor) }

  
[display_data _default_20x4 print_progress]
position: 8, 0
text: { "{:^10.0%}".format(printer.display_status.progress) }
[display_data _default_20x4 progress_bar]
position: 8, 1 # Draw graphical progress bar after text is written
text: { draw_progress_bar(8, 0, 28, printer.display_status.progress) }
[display_data _default_20x4 print_progress]
position: 9, 12
text:
  {% if 'virtual_sdcard' in printer and printer.virtual_sdcard.progress %}
    ~sd~
  {% else %}
    ~usb~
  {% endif %}
  { "{:^4.0%}".format(printer.display_status.progress) }

[display_data _default_20x4 printing_time]
position: 7, 0
text:  
 Printing Time  ~clock~
  { render("_printing_time") }

[display_data _default_20x4 print_status]
position: 6, 0
text: { render("_print_status") }

#[include /home/daniel-kuechle/M600.cfg]

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
default_parameter_BED_TEMP: 60
default_parameter_EXTRUDER_TEMP: 215
gcode:
    M117 Heating...
    M140 S{BED_TEMP}                         ; set bed final temp
    M104 S{EXTRUDER_TEMP}                         ; set extruder final temp
    M190 S{BED_TEMP}                         ; wait for bed final temp
    M109 S{EXTRUDER_TEMP}                         ; wait for extruder final temp
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    M83 ; use relative distances for extrusion
    G28                            ; home all axes
    G1 Z20 F3000                   ; move nozzle away from bed
    bed_mesh_clear
    BED_MESH_CALIBRATE
   
[gcode_macro G29]
gcode:
    bed_mesh_clear
    BED_MESH_CALIBRATE
   

#Pause/Resume Functionality
[pause_resume]
#recover_velocity: 50


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                        ; z hop amount

    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                        ; set z hop variable for reference in resume macro
    
    SAVE_GCODE_STATE NAME=PAUSE
    BASE_PAUSE                                                                                    ; pause print
    G91                                                                                            ; relative positioning
    G1 Z{z} F900                                                                                ; raise Z up by z hop amount
    G90                                                                                            ; absolute positioning
    G1 XG0 X{printer.toolhead.axis_maximum.x/2} YG0 Y{printer.toolhead.axis_minimum.y+10} F18000   ; park toolhead at front center
    RESTORE_GCODE_STATE NAME=PAUSE
    SET_IDLE_TIMEOUT TIMEOUT=43200                                                                ; set timeout to 12 hours
 
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                                                                ; nozzle prime amount
    
    SAVE_GCODE_STATE NAME=RESUME
    G91                                                                                                                    ; relative positioning
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
        G1 Z{zhop * -1} E{e} F900                                                                                        ; prime nozzle by E, lower Z back down
    {% else %}                        
        G1 Z{zhop * -1} F900                                                                                            ; lower Z back down    without priming
    {% endif %}                                
    RESTORE_GCODE_STATE NAME=RESUME                        
    BASE_RESUME                                                                                                            ; resume print
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}    
    
[gcode_macro M601]
gcode:
    RESUME

[gcode_macro M300]; Use the Buzzer of the Prusa Mini
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0


[gcode_macro CHANGE_FILAMENT]
gcode:
    PAUSE
    UNLOAD_FILAMENT
    M300 S600 P800
    G4 P1000
    M300 S600 P800
    G4 P1000
    M300 S600 P800
    
    
[gcode_macro CONNECTED]
gcode:
    M300 S1000 P5
    M300 S1400 P1


[gcode_macro DISCONNECTED]
gcode:
    M300 S1400 P1
    M300 S1000 P5
    
    
[gcode_macro LOAD_FILAMENT]
gcode: 
   {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}
      SAVE_GCODE_STATE NAME=LOAD_state
      M117 Loading filament..
      M83                            ; set extruder to relative
      G1 E50 F300                    ; load (multiple times to avoid length limit)
      G1 E50 F2000
      G1 E50 F2000
      G1 E50 F2000
      G1 E50 F2000
      G1 E50 F2000
      G1 E50 F1000
      G1 E50 F300
      G1 E10 F300
      G1 E-1 F300                    ; short retract
      M117 Filament loaded
      UPDATE_DELAYED_GCODE ID=SCHEDULE_CLEAR_SCREEN DURATION=5
      RESTORE_GCODE_STATE NAME=LOAD_state
   {% else %}
      { action_respond_info("Filament loading disabled while printing!") }
   {% endif %}
   
[gcode_macro UNLOAD_FILAMENT]
gcode:
   {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}
      SAVE_GCODE_STATE NAME=UNLOAD_state
      
      M83                            ; set extruder to relative
      G1 E5 F450                     ; quick purge
      G1 E-4 F1800                   ; fast retract
      G1 E-16 F1200                  ; retract
      SLEEP MS=1000                  ; wait for filament to cool
      G1 E-10 F300                   ; slow retract purge
      G1 E-50 F2000                    ; load (multiple times to avoid length limit)
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      G1 E-50 F2000
      M117 Filament unloaded

      UPDATE_DELAYED_GCODE ID=SCHEDULE_CLEAR_SCREEN DURATION=5
      RESTORE_GCODE_STATE NAME=UNLOAD_state
   {% else %}
      { action_respond_info("Filament unloading disabled while printing!") }
   {% endif %}
   

[menu __main __octoprint __resume]
type: command
name: Resume printing
index: 2
gcode:
    RESUME

[menu __main __filament __change]
type: command
name: Change Filament
index: 8
gcode:
    CHANGE_FILAMENT

    
[menu __main __filament __load]
type: command
name: Load Filament
index: 1
gcode:
    LOAD_FILAMENT
    
[menu __main __filament __unload]
type: command
name: Unload Filament
index: 2
gcode:
    UNLOAD_FILAMENT
    

[gcode_macro PRINT_END]
gcode: |
    M104 S0 ; turn off temperature
    M140 S0 ; turn off heatbed
    M107 ; turn off fan
    g91
    G1 Z1
    g90
    G1 X0 Y180 F3000 ; home X axis
    M84 ; disable motor
    BED_MESH_CLEAR
    
